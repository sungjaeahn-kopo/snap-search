name: Backend Deployment

on:
  push:
    branches:
      - main   # main 브랜치에 푸시될 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SPRING_PROFILE: prod   # 운영 환경에서는 prod 사용 (필요시 변경 가능)

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JDK 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Add application.properties with secrets
        run: |
          echo "azure.storage.connection-string=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> src/main/resources/application.properties
          echo "azure.storage.container-name=${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}" >> src/main/resources/application.properties


      # 3. Spring Boot 빌드 (환경별 프로파일 적용)
      - name: Build Spring Boot application
        run: |
          ./gradlew build -Pprofile=${{ env.SPRING_PROFILE }}

      # 4. Docker 이미지 생성
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .

      # 5. Docker Hub에 푸시
      - name: Push Docker image to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 6. 원격 서버로 배포
      - name: Deploy backend to server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > backend_key.pem
          chmod 600 backend_key.pem
          ssh -o StrictHostKeyChecking=no -i backend_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod ${{ secrets.DOCKER_USERNAME }}/backend:latest
          EOF
